import{_ as i,c as a,a2 as l,o as e}from"./chunks/framework.DptEmx5X.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Backend/Docker/Docker.md","filePath":"Backend/Docker/Docker.md"}'),n={name:"Backend/Docker/Docker.md"};function t(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p><a href="https://docs.docker.com/" target="_blank" rel="noreferrer">https://docs.docker.com/</a></p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 国外镜像仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 阿里云镜像仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd.io</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-buildx-plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose-plugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新软件包索引</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> makecache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fast</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试安装成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><h3 id="配置镜像加速器" tabindex="-1">配置镜像加速器 <a class="header-anchor" href="#配置镜像加速器" aria-label="Permalink to &quot;配置镜像加速器&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker/daemon.json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;EOF&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;registry-mirrors&quot;: [&quot;https://1aefdpmy.mirror.aliyuncs.com&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><img src="https://raw.githubusercontent.com/Moriic/picture/main/image/1711357196_0.png" alt="image-20230927002410781" style="zoom:67%;"><h3 id="帮助命令" tabindex="-1">帮助命令 <a class="header-anchor" href="#帮助命令" aria-label="Permalink to &quot;帮助命令&quot;">​</a></h3><ul><li><code>docker info</code>：docker 详细信息</li><li><code>docker 命令 --help</code>：帮助命令</li></ul><h3 id="镜像命令" tabindex="-1">镜像命令 <a class="header-anchor" href="#镜像命令" aria-label="Permalink to &quot;镜像命令&quot;">​</a></h3><ul><li><p><code>docker images</code>：显示本地 docker 镜像</p><ul><li>-a：显示所有镜像</li><li>-q：只显示镜像 id</li></ul></li><li><p><code>docker search 镜像名</code>：搜索镜像</p><ul><li>-f：过滤搜索结果，如 <code>-f=STARS=3000</code> 表示过滤收藏大于 3000 的</li></ul></li><li><p><code>docker pull 镜像名[:tag]</code>：拉取镜像，默认最新，tag 指定版本</p></li><li><p><code>docker rmi -f 镜像id</code>：删除镜像</p><ul><li><code>docker rmi -f $(docker images -aq)</code>：删除所有镜像</li></ul></li><li><p><code>docker save -o 文件名称.tar 镜像名:tag</code>：保存镜像包</p></li><li><p><code>docker load -i 文件名称.tar</code>：加载镜像包</p></li></ul><h3 id="容器命令" tabindex="-1">容器命令 <a class="header-anchor" href="#容器命令" aria-label="Permalink to &quot;容器命令&quot;">​</a></h3><ul><li><code>docker run [可选参数] image</code>：通过镜像创建并运行容器 <ul><li><code>--name=&quot;Name&quot;</code>：容器名字</li><li>-d：后台运行</li><li>-it：使用交互方式运行，进入容器查看内容</li><li>-p：指定容器端口 <ul><li>-p ip: 主机端口: 容器端口</li><li>-p 主机端口: 容器端口</li><li>-p 容器端口</li></ul></li><li>-P：随机指定端口</li><li>-e key = value：指定容器的环境变量</li><li>-v 数据卷名称: 容器内目录：创建数据卷挂载</li><li>-v 本地目录: 容器内目录：本地目录需要以 / 或 ./ 开头</li><li><code>--network NETWORK</code>：设置网桥</li></ul></li><li><code>docker ps</code>：查看当前运行的容器 <ul><li>-a：查看历史运行的容器</li><li>-n =？：显示最近创建的 n 个容器</li><li>-q：只显示容器 id</li><li><code>--format &quot;展示内容&quot;</code></li></ul></li></ul><blockquote><p>设置命令别名：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docker ps –format &quot;table {{.ID}}\\t{{.Image}}\\t{{.Ports}}\\t{{.Status}}\\t{{.Names}}&quot;&#39;</span></span></code></pre></div></blockquote><ul><li><code>docker rm 容器id </code>：删除容器 <ul><li><code>docker rm -f $(docker ps -aq)</code>：删除所有容器</li></ul></li><li><code>exit</code>：退出容器并停止 <ul><li>Ctrl + P + Q：退出容器不停止</li></ul></li><li><code>docker start 容器id</code>：启动容器(不创建)</li><li><code>docker restart 容器id</code>：重启容器</li><li><code>docker stop 容器id</code>：停止容器</li><li><code>docker kill 容器id</code>：强制停止容器</li></ul><h3 id="其他命令" tabindex="-1">其他命令 <a class="header-anchor" href="#其他命令" aria-label="Permalink to &quot;其他命令&quot;">​</a></h3><ul><li><code>docker logs [选项] 容器id </code>：查看日志 <ul><li>-f：持续监控 log</li><li>-t：显示时间</li><li>-n：显示条数</li></ul></li><li><code>docker top 容器id</code>：查看容器进程信息</li><li><code>docker inspect 容器id</code>：查看容器元数据</li><li><code>docker exec -it 容器id bashShell</code>：进入当前运行的容器后开启新的终端 <ul><li>bashShell：/bin/bash</li></ul></li><li><code>docker attach 容器id</code>：进入容器正在进行的终端，不会启动新的进程</li><li><code>docker cp 容器id:容器内路径 主机目的路径</code>：拷贝容器内文件到主机</li></ul><h2 id="数据卷" tabindex="-1">数据卷 <a class="header-anchor" href="#数据卷" aria-label="Permalink to &quot;数据卷&quot;">​</a></h2><p><strong>数据卷(volume)</strong> 是一个虚拟目录，是 <strong>容器内目录与宿主机目录之间映射的桥梁</strong></p><p>/var/lib/docker/volumes/xx</p><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><ul><li><code>docker volumn create </code>：创建数据卷</li><li><code>docker volumn ls</code>：查看数据卷</li><li><code>docker volumn rm 数据卷</code>：删除指定数据卷</li><li><code>docker volumn inspect 数据卷</code> ：查看某个数据卷的详情</li><li><code>docker volumn prune</code>：清楚数据卷</li></ul><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><p>Dockerfile 文本文件包含一个个指令，用来构建镜像</p><ul><li><code>FROM</code>：指定基础镜像</li><li><code>ENV</code>：设置环境变量</li><li><code>COPY</code>：拷贝本地文件到镜像的指定目录</li><li><code>RUN</code>：运行 shell 命令</li><li><code>EXPOSE</code>：指定容器运行时监听的端口</li><li><code>ENTRYPOINT</code>：镜像中应用的启动命令，容器运行时调用</li></ul><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:16.04</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_DIR=/usr/local</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./jdk8.tar.gz $JAVA_DIR/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./docker-demo.jar /tmp/app.jar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd $JAVA_DIR \\ &amp;&amp; tar -xf ./jdk8.tar.gz \\ &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_HOME=$JAVA_DIR/java8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH=$PATH:$JAVA_HOME/bin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/app.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openjdk:11.0-jre-buster</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./docker-demo.jar /app.jar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/app.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><code>docker build -t myImage:[tag] .</code> ：Dockerfile 构建命令</p><h2 id="容器网络" tabindex="-1">容器网络 <a class="header-anchor" href="#容器网络" aria-label="Permalink to &quot;容器网络&quot;">​</a></h2><p><code>docker netword 命令</code></p><ul><li><code>create NETWORK</code>：创建网络</li><li><code>ls</code>：查看网络</li><li><code>rm NETWORK</code>：删除</li><li><code>prune</code>：删除未使用的网络</li><li><code>connect NETWORK CONTAINER</code>：容器加入网络</li><li><code>disconnect NETWORK CONTAINER</code>：容器离开网络</li><li><code>inspect NETWORK</code>：查看网络</li></ul><h2 id="dockercompose" tabindex="-1">DockerCompose <a class="header-anchor" href="#dockercompose" aria-label="Permalink to &quot;DockerCompose&quot;">​</a></h2><p>docker-compose.yml 定义一组相关联的应用容器</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.8&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servises</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	containerA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3306:3306&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hmall</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	containerB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			dockerfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		container_namr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hmall</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		 	- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	hm-net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hmall</span></span></code></pre></div><p><code>docker compose [OPTIONS] [COMMAND]</code></p><ul><li>-f：指定 compose 文件路径和名称</li><li>-p：指定 project 名称</li><li>up：创建并启动所有 service 容器</li><li>down：停止并移除所有容器，网络</li><li>ps/logs/stop/start/restart/top/exec</li></ul><h2 id="常用命令-1" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令-1" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><ul><li><p>删除退出容器：<code>docker rm $(docker ps -q -f status=exited)</code></p></li><li><p>删除未使用的镜像：<code>docker image prune -a</code></p></li></ul><h2 id="配置-tcp-连接" tabindex="-1">配置 TCP 连接 <a class="header-anchor" href="#配置-tcp-连接" aria-label="Permalink to &quot;配置 TCP 连接&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/lib/systemd/system/docker.service</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/bin/dockerd</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tcp://0.0.0.0:2375</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unix://var/run/docker.sock</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><h2 id="docker-两个容器数据共享" tabindex="-1">Docker 两个容器数据共享 <a class="header-anchor" href="#docker-两个容器数据共享" aria-label="Permalink to &quot;Docker 两个容器数据共享&quot;">​</a></h2><p>要实现两个容器共享数据，可以通过以下步骤进行操作：</p><h3 id="_1-创建一个命名的-docker-volume" tabindex="-1">1. 创建一个命名的 Docker Volume <a class="header-anchor" href="#_1-创建一个命名的-docker-volume" aria-label="Permalink to &quot;1. 创建一个命名的 Docker Volume&quot;">​</a></h3><p>首先，使用 Docker 命令创建一个命名的 Volume。这样你可以在多个容器之间共享数据。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-shared-volume</span></span></code></pre></div><p>其中 <code>my-shared-volume</code> 是你创建的 Volume 的名称。</p><h3 id="_2-使用-docker-cli-创建并挂载-volume-的容器" tabindex="-1">2. 使用 Docker CLI 创建并挂载 Volume 的容器 <a class="header-anchor" href="#_2-使用-docker-cli-创建并挂载-volume-的容器" aria-label="Permalink to &quot;2. 使用 Docker CLI 创建并挂载 Volume 的容器&quot;">​</a></h3><p>假设你要创建两个容器 <code>container1</code> 和 <code>container2</code>，并将 <code>my-shared-volume</code> 挂载到两个容器中。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-shared-volume:/app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> busybox</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-shared-volume:/app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> busybox</span></span></code></pre></div><p>在这两个命令中，<code>/app</code> 是挂载到容器内的目录路径，你可以根据需求进行修改。</p>`,50)]))}const F=i(n,[["render",t]]);export{c as __pageData,F as default};
