import{_ as a,c as i,a2 as e,o as s}from"./chunks/framework.Dtz5kk4D.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Backend/MySQL/MySQL基础.md","filePath":"Backend/MySQL/MySQL基础.md"}'),d={name:"Backend/MySQL/MySQL基础.md"};function l(n,t,h,r,p,o){return s(),i("div",null,t[0]||(t[0]=[e(`<h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><p>启动：net start [mysql 名字]</p><p>停止：net stop [mysql 名字]</p><p>客户端连接：mysql [-h 127.0.0.1] [-P 3306] -uroot -p [密码]</p><p>退出：exit</p><p>查看数据库：show databases:(以分号结尾)</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="数值类型" tabindex="-1">数值类型 <a class="header-anchor" href="#数值类型" aria-label="Permalink to &quot;数值类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小</th></tr></thead><tbody><tr><td>tinyint</td><td>1 byte</td></tr><tr><td>smallint</td><td>2 byte</td></tr><tr><td>mediumint</td><td>3 byte</td></tr><tr><td>int/interger</td><td>4 byte</td></tr><tr><td>bigint</td><td>8 byte</td></tr><tr><td>float</td><td>4 byte</td></tr><tr><td>double</td><td>8 byte</td></tr><tr><td>decimal</td><td></td></tr></tbody></table><h3 id="字符串类型" tabindex="-1">字符串类型 <a class="header-anchor" href="#字符串类型" aria-label="Permalink to &quot;字符串类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小(bytes)</th><th>说明</th></tr></thead><tbody><tr><td>char(size)</td><td>255</td><td>定长字符串，性能好</td></tr><tr><td>varchar(size)</td><td>65535</td><td>变长字符串，内存少</td></tr><tr><td>tinyblob</td><td>255</td><td>blob 存放二进制数据</td></tr><tr><td>tinytext</td><td>255</td><td>text 存放文本数据</td></tr><tr><td>blob</td><td>65535</td><td></td></tr><tr><td>text</td><td>65535</td><td></td></tr><tr><td>mediumblob</td><td>16777215</td><td></td></tr><tr><td>mediumtext</td><td>16777215</td><td></td></tr><tr><td>longblob</td><td>x</td><td></td></tr><tr><td>longtext</td><td>x</td><td></td></tr></tbody></table><h3 id="日期类型" tabindex="-1">日期类型 <a class="header-anchor" href="#日期类型" aria-label="Permalink to &quot;日期类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>大小</th><th>格式</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>YYYY-MM-DD</td></tr><tr><td>time</td><td>3</td><td>HH: MM: SS</td></tr><tr><td>year</td><td>1</td><td>YYYY</td></tr><tr><td>datetime</td><td>8</td><td>YYYY-MM-DD HH: MM: SS</td></tr><tr><td>timestamp</td><td>4</td><td>YYYY-MM-DD HH: MM: SS</td></tr></tbody></table><h2 id="sql-分类" tabindex="-1">SQL 分类 <a class="header-anchor" href="#sql-分类" aria-label="Permalink to &quot;SQL 分类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Date Query Language</td><td>数据查询语言，用来查询数据库中的记录</td></tr><tr><td>DCL</td><td>Date Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="ddl" tabindex="-1">DDL <a class="header-anchor" href="#ddl" aria-label="Permalink to &quot;DDL&quot;">​</a></h3><h4 id="数据库操作" tabindex="-1">数据库操作 <a class="header-anchor" href="#数据库操作" aria-label="Permalink to &quot;数据库操作&quot;">​</a></h4><ul><li>查询所有数据库：<code>show databases;</code></li><li>查询当前数据库：<code>select database();</code></li><li>创建数据库：<code>create database [if not exists] 数据库名 [dafault charset 字符集] [collate 排序规则];</code></li><li>删除数据库：<code>drop database[if exist]数据库名;</code></li><li>使用指定数据库：<code>use 数据库名;</code></li></ul><h4 id="表操作" tabindex="-1">表操作 <a class="header-anchor" href="#表操作" aria-label="Permalink to &quot;表操作&quot;">​</a></h4><ul><li>查询当前数据库所有表：<code>show tables;</code></li><li>查询表结构：<code>desc 表名;</code></li><li>查询指定表的建表语句：<code>show create table 表名;</code></li><li>建表操作：</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 表名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	字段1 类型[comment 注释],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	字段2 类型[comment 注释]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[comment 注释];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">例如：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gender&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user table&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    workno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">tinyint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    idcard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entrydate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><p>添加字段：<code>alter table 表名 add 字段名 类型(长度) [after 字段名] [comment 注释] [约束];</code></p><p><code>alter table emp add nickname varchar(20) after workno;</code></p></li><li><p>修改数据类型：<code>alter table 表名 modify 字段名 新数据类型(长度);</code></p><p><code>alter table emp modify name varchar(20);</code></p></li><li><p>修改字段名和类型：<code>alter table 表名 change 旧字段名 新字段名 新数据类型(长度); </code></p><p><code> alter table emp change name username varchar(10);</code></p></li><li><p>删除字段：<code>alter table 表名 drop 字段名;</code></p><p><code>alter table emp drop username</code></p></li><li><p>修改表名：<code>alter table 表名 rename to 新表名</code></p><p><code>alter table emp remame to employee</code></p></li><li><p>删除表：<code>drop table [if exists] 表名;</code></p></li><li><p>删除指定表并重新创建：<code>truncate table 表名;</code></p></li></ul><h3 id="dml" tabindex="-1">DML <a class="header-anchor" href="#dml" aria-label="Permalink to &quot;DML&quot;">​</a></h3><h4 id="添加数据" tabindex="-1">添加数据 <a class="header-anchor" href="#添加数据" aria-label="Permalink to &quot;添加数据&quot;">​</a></h4><ul><li><p>指定字段添加数据：<code>insert into 表名 (字段名1,字段名2,...) values(值1,值2,...);</code></p></li><li><p>给全部字段添加数据：<code>insert into 表名 values(值1,值2,...)</code></p><p>批量添加数据：<code>insert into 表名 (字段名1,字段名2,...) values(值1,值2,...),(值1,值2,...);</code></p><p><code>insert into employee values(1,&#39;1&#39;,&#39;first&#39;,&#39;男&#39;,18,&#39;123456789123456789&#39;,&#39;2000-11-11&#39;);</code></p></li></ul><h4 id="修改数据" tabindex="-1">修改数据 <a class="header-anchor" href="#修改数据" aria-label="Permalink to &quot;修改数据&quot;">​</a></h4><p><code>update 表名 set 字段名=值1,字段名=值2,...[where 字段名=条件值];</code></p><p><code>update employee set name = &#39;second&#39; where id = 1;</code></p><h4 id="删除数据" tabindex="-1">删除数据 <a class="header-anchor" href="#删除数据" aria-label="Permalink to &quot;删除数据&quot;">​</a></h4><p><code>delete from 表名 [where 条件]</code></p><h3 id="dql" tabindex="-1">DQL <a class="header-anchor" href="#dql" aria-label="Permalink to &quot;DQL&quot;">​</a></h3><ul><li>语法顺序：<code>select 字段列表 from 表名列表 where 条件列表 group by 分组字段列表 having 分组后的过滤条件 order by 排序字段列表 limit 分页参数</code></li><li>执行顺序：from -&gt; where -&gt; group by -&gt; select -&gt; having -&gt; order by -&gt; limit</li></ul><h4 id="基本查询" tabindex="-1">基本查询 <a class="header-anchor" href="#基本查询" aria-label="Permalink to &quot;基本查询&quot;">​</a></h4><ul><li><p>查询多个字段：<code>select 字段1 [别名1],字段2 [别名2]... from 表名;</code></p></li><li><p>查询所有字段：<code>select * from 表名</code></p></li><li><p>去除重复记录：<code>select distinct 字段列表 [别名] from 表名</code></p></li></ul><h4 id="条件查询" tabindex="-1">条件查询 <a class="header-anchor" href="#条件查询" aria-label="Permalink to &quot;条件查询&quot;">​</a></h4><p><code>select 字段列表 from 表名 where 条件列表</code></p><table tabindex="0"><thead><tr><th>条件</th><th>说明</th></tr></thead><tbody><tr><td>&gt;,&gt;=,&lt;,&lt;=,=,!=</td><td></td></tr><tr><td>between A and B</td><td>[A, B]</td></tr><tr><td>in(值列表)</td><td>在列表值中</td></tr><tr><td>like &#39;参数&#39;</td><td>参数_代表单个字符, 参数%代表任意个字符</td></tr><tr><td>is null</td><td>为 null</td></tr><tr><td>&amp;&amp;,||,!</td><td></td></tr></tbody></table><p><code>select * from employee where idcard like &#39;%X&#39;;</code></p><h4 id="聚合函数" tabindex="-1">聚合函数 <a class="header-anchor" href="#聚合函数" aria-label="Permalink to &quot;聚合函数&quot;">​</a></h4><p>统计一列的函数值(不包括 null)：<code>select 聚合函数(参数列表) from 表名 [where 条件]</code></p><p><code>select avg(age) from employee;</code></p><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max, min</td><td>最大最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><h4 id="分组查询" tabindex="-1">分组查询 <a class="header-anchor" href="#分组查询" aria-label="Permalink to &quot;分组查询&quot;">​</a></h4><p><code>select 字段列表 from 表名列表 [where 条件列表] group by 分组字段列表 having [分组后的过滤条件]</code></p><p>where 和 having 区别</p><ol><li>where 在分组前过滤，having 在分组后过滤</li><li>where 不能使用聚合函数，having 可用</li></ol><p>例子：分组前选择 age &gt;= 18 进行过滤, 以性别进行分组, 并选择性别数量大于 2 的进行查询。</p><p><code>select gender,count(*) gender_num from employee where age &gt;= 18 group by gender having gender_num &gt;= 2;</code></p><h4 id="排序查询" tabindex="-1">排序查询 <a class="header-anchor" href="#排序查询" aria-label="Permalink to &quot;排序查询&quot;">​</a></h4><p><code>select 字段列表 from 表名 order by 字段1 排序方式1,字段2 排序方式2;</code></p><p>排序方式：asc: 升序(默认), desc(降序)</p><p><code>select * from employee order by age,entrydate desc;</code></p><h4 id="分页查询" tabindex="-1">分页查询 <a class="header-anchor" href="#分页查询" aria-label="Permalink to &quot;分页查询&quot;">​</a></h4><p><code>selece 字段列表 from 表名 limit 起始索引,查询记录数;</code></p><ol><li>起始索引从 0 开始，起始索引 = (查询页码 - 1) * 每页显示记录数</li><li>第一页起始索引可省略，即 limit 10;</li></ol><p>查询 5 条记录，去掉前 3 条，显示 2 条，即每页两条记录，显示第</p><p><code>select * from employee limit 3,2;</code></p><h3 id="dcl" tabindex="-1">DCL <a class="header-anchor" href="#dcl" aria-label="Permalink to &quot;DCL&quot;">​</a></h3><h4 id="用户管理" tabindex="-1">用户管理 <a class="header-anchor" href="#用户管理" aria-label="Permalink to &quot;用户管理&quot;">​</a></h4><ul><li><p>查询用户：<code>use mysql</code> <code>select * from user</code></p></li><li><p>创建用户：<code>create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</code></p><p>当前主机：<code>create user &#39;cwc&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</code></p><p>任意主机：<code>create user &#39;cwc&#39;@&#39;%&#39; identified by &#39;123456&#39;;</code></p></li><li><p>修改用户密码：<code>alter user &#39;用户名&#39;@&#39;主机名&#39; identified with mysql_native_password by &#39;密码&#39;;</code></p></li><li><p>删除用户：<code>drop user &#39;用户名&#39;@&#39;主机名&#39;;</code></p></li></ul><h4 id="权限管理" tabindex="-1">权限管理 <a class="header-anchor" href="#权限管理" aria-label="Permalink to &quot;权限管理&quot;">​</a></h4><table tabindex="0"><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>all</td><td>所有权限</td></tr><tr><td>select</td><td>查询数据</td></tr><tr><td>insert</td><td>插入数据</td></tr><tr><td>updata</td><td>修改数据</td></tr><tr><td>delete</td><td>删除数据</td></tr><tr><td>alter</td><td>修改表</td></tr><tr><td>drop</td><td>删除数据库</td></tr><tr><td>create</td><td>创建数据库</td></tr></tbody></table><ul><li>查询权限：<code>show grants for &#39;用户名&#39;@&#39;主机名&#39;;</code></li><li>授予权限：<code>grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</code></li></ul><p><code>grant all on test.* to &#39;cwc&#39;@&#39;localhost&#39;;</code></p><p>撤销权限：<code>revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;; </code></p><p><code>revoke all on test.* from &#39;cwc&#39;@&#39;localhost&#39;;</code></p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h3 id="字符串函数" tabindex="-1">字符串函数 <a class="header-anchor" href="#字符串函数" aria-label="Permalink to &quot;字符串函数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>concat(s1, s1,…, sn)</td><td>拼接字符串</td></tr><tr><td>lower(str)</td><td>将字符串转换为小写</td></tr><tr><td>upper(str)</td><td>将字符串转换为大写</td></tr><tr><td>lpad(str, n, pad)</td><td>用字符串 pad 对 str 进行左填充，直到长度为 n</td></tr><tr><td>rpad(str, n, pad)</td><td>用字符串 pad 对 str 进行右填充，直到长度为 n</td></tr><tr><td>trim(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>substring(str, start, len)</td><td>截取 str 从 start 开始的 len 个长度的字符串</td></tr></tbody></table><h3 id="数值函数" tabindex="-1">数值函数 <a class="header-anchor" href="#数值函数" aria-label="Permalink to &quot;数值函数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ceil(x)</td><td>向上取整</td></tr><tr><td>floor(x)</td><td>向下取整</td></tr><tr><td>mod(x, y)</td><td>返回 x/y 的模</td></tr><tr><td>rand()</td><td>返回 0~1 的随机数，double</td></tr><tr><td>round(x, y)</td><td>求参数 x 的四舍五入值，保留 y 位小数</td></tr></tbody></table><p>生成 6 位随机验证码：<code>select rpad(round(rand()*1000000,0),6,&#39;0&#39;);</code></p><h3 id="日期函数" tabindex="-1">日期函数 <a class="header-anchor" href="#日期函数" aria-label="Permalink to &quot;日期函数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>curdate()</td><td>获取当前日期</td></tr><tr><td>curtime()</td><td>获取当前时间</td></tr><tr><td>now()</td><td>获取当前日期和时间</td></tr><tr><td>year/month/day(date)</td><td>获取 date 的年/月/日</td></tr><tr><td>date_add(date, INTERVAL expr type)</td><td>返回 date 加上间隔 expr 后的时间</td></tr><tr><td>datediff(date1, date2)</td><td>返回时间间隔天数</td></tr></tbody></table><h3 id="流程函数" tabindex="-1">流程函数 <a class="header-anchor" href="#流程函数" aria-label="Permalink to &quot;流程函数&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>if(value, t, f)</td><td>如果 value 为 true，返回 t，否则返回 f</td></tr><tr><td>ifnull(value1, value2)</td><td>如果 value1 不为空，返回 value1，否则返回 value2</td></tr><tr><td>case when [val1] then [res1] … else [default] end</td><td>如果 val1 为 true 返回 res1，否则返回 default 默认值</td></tr><tr><td>case [expr] when [val1] then [res1] … else [default] end</td><td>如果 expr 值为 val1，返回 res1，否则返回 default 默认值</td></tr></tbody></table><p><code>select (case workaddress when &#39;北京&#39; then &#39;一线城市&#39; when &#39;上海&#39; then &#39;一线城市&#39; else &#39;二线城市&#39; end) from emp;</code></p><p><code>select if (workaddress in (&#39;北京&#39;,&#39;上海&#39;),&#39;一线城市&#39;,&#39;二线城市&#39;) from emp; </code></p><h2 id="约束" tabindex="-1">约束 <a class="header-anchor" href="#约束" aria-label="Permalink to &quot;约束&quot;">​</a></h2><p>约束作用于表中字段上的规则，用于限制存储在表中的数据。</p><h4 id="约束命令" tabindex="-1">约束命令 <a class="header-anchor" href="#约束命令" aria-label="Permalink to &quot;约束命令&quot;">​</a></h4><table tabindex="0"><thead><tr><th>约束</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>非空约束</td><td>not null</td><td>非空</td></tr><tr><td>唯一约束</td><td>unique</td><td>唯一，不能重复</td></tr><tr><td>主键约束</td><td>primary key</td><td>主键为唯一标识，非空唯一</td></tr><tr><td>默认约束</td><td>default</td><td>指定默认值</td></tr><tr><td>检查约束</td><td>check</td><td>保证字段满足一个条件</td></tr><tr><td>外键约束</td><td>foreign key</td><td>两张表建立连接</td></tr><tr><td>自动增长</td><td>auto_increment</td><td>自动增长 1</td></tr></tbody></table><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto_increment comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;主键&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;姓名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;年龄&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;状态&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;性别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    idcard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   	primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idcard)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)comment </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="主键约束" tabindex="-1">主键约束 <a class="header-anchor" href="#主键约束" aria-label="Permalink to &quot;主键约束&quot;">​</a></h4><p>主键只能由一个, 主键建议使用 int, bigint, char 等定长类型。</p><ul><li>单一主键：<code>idcard int primary key;</code>(列级方式), <code>primary key(idcard);</code>(表级方式)</li><li>复合主键：<code>primary key(id,name;)</code></li><li>自然主键：<code>id int primary key auto_increment;</code></li></ul><h4 id="外键约束" tabindex="-1">外键约束 <a class="header-anchor" href="#外键约束" aria-label="Permalink to &quot;外键约束&quot;">​</a></h4><p>添加外键：</p><ul><li><code>create table 表名([constraint] [外键名字] foreign key(外键字段名) references 主表(主表列名)) [on update 更新行为 on delete 删除行为];</code></li><li><code>alter table 表名 add constraint 外键名字 foreign key(外键字段名) references 主表(主表列名)) [on update 更新行为 on delete 删除行为];</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	dname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dept_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    foreign key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dept_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">references</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dept(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fk_emp_dept_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">foreign key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dept_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">references</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dept(id);</span></span></code></pre></div><p>删除外键：<code>alter table 表名 drop foreign key 外键名字 </code></p><p>删除/更新行为：</p><ul><li><code>no action/restrict(默认)</code>：当在父表中删除/更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。</li><li><code>cascade</code>：当在父表中删除/更新记录时，首先检查该记录是否有对应外键，如果有则删除/更新外键在子表中的记录</li><li><code>set null</code>：当在父表中删除/更新记录时，首先检查该记录是否有对应外键，如果有则设置外键在子表的值为 null</li><li><code>set default</code>：父表有变更时，子表将外键设置为一个默认的值</li></ul><h2 id="多表查询" tabindex="-1">多表查询 <a class="header-anchor" href="#多表查询" aria-label="Permalink to &quot;多表查询&quot;">​</a></h2><h3 id="内连接" tabindex="-1">内连接 <a class="header-anchor" href="#内连接" aria-label="Permalink to &quot;内连接&quot;">​</a></h3><p>查询两张表交集的部分</p><ol><li>隐式内连接：<code>select 字段列表 from 表1,表2 where条件;</code></li><li>显式内连接：<code>select 字段列表 from 表1 [inner] join 表2 on 连接条件</code></li></ol><p>例如：表 emp 表示员工对应的部门 id，表 dept 表示部门 id 对应的名字，查询每个员工姓名对应的部门名字</p><ol><li>隐式内连接：<code>select emp.name,dept.name from emp,dept where emp.dept_id = dept.id</code></li><li>使用别名：<code>select e.name,d.name from emp e,dept d where e.dept_id = d.id</code></li><li>显式内连接：<code>select e.name,d.name from emp e inner join dept d on e.det_id = d.id</code></li></ol><h3 id="外连接" tabindex="-1">外连接 <a class="header-anchor" href="#外连接" aria-label="Permalink to &quot;外连接&quot;">​</a></h3><ul><li><p>左外连接：查询左表和交集的部分</p><p><code>select 字段列表 from 表1 left [outer] join 表2 on 条件; </code></p></li><li><p>右外连接：查询右表和交集的部分</p><p><code>select 字段列表 from 表1 right [outer] join 表2 on 条件</code></p></li></ul><p>例如：</p><ul><li><p>查询 emp 表的所有数据和对应的部门名字</p><p><code>select e.*,d.name from emp e left outer join dept d e.dept_id = d.id</code></p></li><li><p>查询 dept 表的所有数据和对应的员工信息</p><p><code>select d.*,e.* from emp e right outer join dept d e.dept_id = d.id</code></p></li></ul><h3 id="自连接" tabindex="-1">自连接 <a class="header-anchor" href="#自连接" aria-label="Permalink to &quot;自连接&quot;">​</a></h3><p>一张表看成两张表，起两个别名，使用内连接或外连接</p><p><code>select 字段列表 from 表1 别名1 join 表1 别名2 on 条件</code></p><p>例如：表 emp 中包含自身 id 和所属领导 id</p><p>查询员工及其所属领导信息:</p><p><code>select e.name,m.name from emp e,emp m where e.id = m.manager.id</code></p><p><code>select e.name,m.name from emp e join emp m on e.id = m.manager.id</code></p><p>查询员工的所有信息及其领导的信息：</p><p><code>select a.name,b.name from emp a left join emp b on a.manager.id = b.id </code></p><h3 id="联合查询" tabindex="-1">联合查询 <a class="header-anchor" href="#联合查询" aria-label="Permalink to &quot;联合查询&quot;">​</a></h3><p>将多次查询的结果合并起来, union 会去重, 字段列表需要一致</p><p><code>select 字段列表 from 表1 union[all] select 字段列表 from 表2; </code></p><h3 id="子查询" tabindex="-1">子查询 <a class="header-anchor" href="#子查询" aria-label="Permalink to &quot;子查询&quot;">​</a></h3><p>SQL 语句中嵌套 select 语句</p><p><code>select * from t1 where column1 = (select column1 from t2)</code></p><h4 id="标量子查询" tabindex="-1">标量子查询 <a class="header-anchor" href="#标量子查询" aria-label="Permalink to &quot;标量子查询&quot;">​</a></h4><p>子查询返回单个值, 操作符一般为 = &gt; &lt; &gt; = &lt;=</p><p><code>select * from emp where dept_id = (select id from dept where name = &quot;销售部&quot;)</code></p><h4 id="列子查询" tabindex="-1">列子查询 <a class="header-anchor" href="#列子查询" aria-label="Permalink to &quot;列子查询&quot;">​</a></h4><p>子查询返回一列</p><table tabindex="0"><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>in</td><td>在指定的集合范围内，多选一</td></tr><tr><td>not in</td><td>不在指定的集合范围内</td></tr><tr><td>any/some</td><td>有任何一个满足即可</td></tr><tr><td>all</td><td>所有值都需要满足</td></tr></tbody></table><p><code>select * from emp where dept_id = (select id from dept where name = &#39;销售部&#39; or name = &#39;市场部&#39;)</code></p><h4 id="行子查询" tabindex="-1">行子查询 <a class="header-anchor" href="#行子查询" aria-label="Permalink to &quot;行子查询&quot;">​</a></h4><p>子查询返回一行，操作符一般为： = &gt; &lt; in not in</p><p>例如：查询与张三的工资和领导相同的员工信息</p><p><code>select * from emp where (salary,managerid) = (select salary,managerid from emp where name = &#39;张三&#39;)</code></p><h4 id="表子查询" tabindex="-1">表子查询 <a class="header-anchor" href="#表子查询" aria-label="Permalink to &quot;表子查询&quot;">​</a></h4><p>子查询返回多行多列，常用操作符：in</p><p><code>select * from emp where (job,salary) in (select job,salary from emp where name = &#39;张三&#39; ) or name = &#39;李四&#39;</code></p><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><p>事务是一组操作的集合，作为一个整体交给系统，要么同时成功，要么同时失败。</p><h3 id="事务操作" tabindex="-1">事务操作 <a class="header-anchor" href="#事务操作" aria-label="Permalink to &quot;事务操作&quot;">​</a></h3><ol><li>查看事务提交方式：<code>select @@autocommit;</code>, 为 1 是自动提交</li><li>设置事务提交方式：<code>set @@autocommit = 0; </code>, 设为手动提交</li><li>开启事务：<code>start transaction 或 begin</code></li><li>提交事务：<code>commit;</code></li><li>回滚事务：<code>rollback;</code></li></ol><h3 id="事务四大特性-acid" tabindex="-1">事务四大特性(ACID) <a class="header-anchor" href="#事务四大特性-acid" aria-label="Permalink to &quot;事务四大特性(ACID)&quot;">​</a></h3><ol><li>原子性(Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性(Consistency): 事务完成时，必须使所有的数据保存一致状态</li><li>隔离性(Isolation): 数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability): 事务一旦提交后或回滚，它对数据库中的数据的改变就是永久的</li></ol><h3 id="并发事务问题" tabindex="-1">并发事务问题 <a class="header-anchor" href="#并发事务问题" aria-label="Permalink to &quot;并发事务问题&quot;">​</a></h3><table tabindex="0"><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读取到了另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同(读取了另一个事务提交更新后的数据)</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，数据又存在(另一个事务插入)</td></tr></tbody></table><h3 id="事务隔离级别" tabindex="-1">事务隔离级别 <a class="header-anchor" href="#事务隔离级别" aria-label="Permalink to &quot;事务隔离级别&quot;">​</a></h3><table tabindex="0"><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommited</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read commited</td><td>x</td><td>√</td><td>√</td></tr><tr><td>Repeated read(默认)</td><td>x</td><td>x</td><td>√</td></tr><tr><td>Serializable(最严格)</td><td>x</td><td>x</td><td>x</td></tr></tbody></table><ol><li>查看事务隔离级别：<code>select @@transaction_isolation</code></li><li>设置事务隔离级别：<code>set [session|global] transaction isolation 事务级别</code></li><li>serializable：表锁，只允许同时一个事务执行</li></ol>`,144)]))}const E=a(d,[["render",l]]);export{c as __pageData,E as default};
